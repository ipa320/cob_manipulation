<?xml version="1.0"?>
<launch>

  <!-- Selffilter expects PointCloud2 -->
  <include file="$(find lwa_arm_navigation)/launch/self_filter.launch" />
  
  <!-- After using selffilter, convert back into PointCloud1 -->
  <node machine="pc1" pkg="point_cloud_converter" type="point_cloud_converter" name="pcc0" output="screen">
	<remap from="points2_in" to="known_objects_filtered2"/>
	<remap from="points_out" to="known_objects_filtered"/>
  </node>

  <!-- Clear known objects from pointcloud -->  
  <node machine="pc1" pkg="planning_environment" type="filter_attached_objects" name="tof_clear_objects" output="log">
    <remap from="cloud_in" to="outlier_self_filtered2" />
    <!--remap from="cloud_in" to="full_cloud" /-->
    <remap from="cloud_out" to="known_objects_filtered2" />
    <remap from="/joint_states" to="/joint_states_combined" />
    <param name="sensor_frame" type="string" value="/tof_link" />    	   
    <param name="fixed_frame" type="string" value="/base_link" />
    <param name="object_padd" type="double" value="0.02" />
    <!--param name="object_scale" type="double" value="1.0" /-->
    <param name="object_scale" type="double" value="1.0" />
    <param name="filter_static_objects" type="bool" value="true"/>
  </node>

  <!-- if needed: converts pointcloud2 to pointcloud1 -->
  <!--node machine="pc1" pkg="point_cloud_converter" type="point_cloud_converter" name="pcc1" output="screen">
	<remap from="points_in" to="/tof/point_cloud"/>
	<remap from="points_in" to="full_cloud_known"/>
	<remap from="points2_out" to="full_cloud_known2"/>
  </node-->	

  
  <!-- start collision map -->
  <include file="$(find lwa_arm_navigation)/launch/collision_map_self_occ.launch" />
  
</launch>
